# CLI Command Contracts: BIE Enhancement

enhanced_evaluate_command:
  command: "python bie.py evaluate <file> --output [json|markdown|both]"
  input_contract:
    parameters:
      file:
        type: Path
        required: true
        description: "Markdown file containing business idea"
      output:
        type: string
        enum: [json, markdown, both]
        default: json
        description: "Output format selection"
      model:
        type: string
        required: false
        description: "Override default LLM model"
      verbose:
        type: boolean
        default: false
        description: "Enable verbose logging"

  output_contract:
    json_output:
      type: object
      schema: "Envelope[EvaluatedIdea]"
    markdown_output:
      type: string
      format: "Enhanced markdown with emoji sections"
    both_output:
      sequence:
        - json_section: "=== JSON OUTPUT ==="
        - json_content: "Envelope[EvaluatedIdea]"
        - markdown_section: "\n=== MARKDOWN OUTPUT ==="
        - markdown_content: "enhanced markdown format"

  error_contract:
    file_not_found:
      type: "Envelope[null]"
      error:
        type: "file_error"
        message: "File not found: {path}"
        recoverable: true
    validation_error:
      type: "Envelope[null]"
      error:
        type: "validation_error"
        message: "1 validation error for {model}"
        recoverable: true

compare_command:
  command: "python bie.py compare <file1> <file2> ... [fileN] --output [json|markdown]"
  input_contract:
    parameters:
      files:
        type: "List[Path]"
        min_items: 2
        max_items: 10
        required: true
        description: "Markdown files to compare (2-10 files)"
      output:
        type: string
        enum: [json, markdown]
        default: json
        description: "Output format for comparison results"

  output_contract:
    json_output:
      type: object
      schema: ComparisonResult
      fields:
        ideas: "List[EvaluatedIdea]"
        ranking: "List[RankingEntry]"
        recommendation: string
        comparison_summary: string
    markdown_output:
      type: string
      format: "Comparison table with ranking and recommendations"

  error_contract:
    invalid_file_count:
      message: "Can only compare 2-10 business ideas"
      type: ValueError
    insufficient_valid_ideas:
      message: "Need at least 2 successfully evaluated ideas for comparison"
      type: ValueError

validate_command:
  command: "python bie.py validate <file>"
  input_contract:
    parameters:
      file:
        type: Path
        required: true
        description: "Markdown file to validate parsing"
  output_contract:
    valid_response:
      type: object
      schema:
        status: "valid"
        idea_name: string
    invalid_response:
      type: object
      schema:
        status: "invalid"
        error: string

selfcheck_command:
  command: "python bie.py selfcheck"
  output_contract:
    success_response:
      type: object
      schema:
        status: "ok"
        version: "1.0.0"

print_schemas_command:
  command: "python bie.py print-schemas"
  output_contract:
    schema_output:
      type: object
      schemas:
        RawIdea: JSONSchema
        EvaluatedIdea: JSONSchema
        ComparisonResult: JSONSchema
        Envelope: JSONSchema

global_cli_behavior:
  exit_codes:
    success: 0
    general_error: 1
    argument_error: 2
  logging_contract:
    structured_logs: "STDERR (JSONL format per Article XVIII)"
    human_output: "STDOUT"
    log_events: [agent_run, agent_run_complete, validation_error]
  backwards_compatibility:
    - "All existing commands maintain identical behavior"
    - "New functionality only accessible via explicit flags"
    - "JSON output schema unchanged for evaluate command"
    - "Error messages and exit codes preserved"